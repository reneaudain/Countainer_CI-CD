name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]

################################################################
###                         TFLint                           ###
###           Lint's HCL for misconfigurations               ###
################################################################
jobs:
  #tflint:
    #runs-on: ${{ matrix.os }}

    #strategy:
      #matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]

    #steps:
    #- uses: actions/checkout@v4
      #name: Checkout source code

    #- uses: actions/cache@v4
      #name: Cache plugin dir
      #with:
        #path: ~/.tflint.d/plugins
        #key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    #- uses: terraform-linters/setup-tflint@v4
      #name: Setup TFLint
      #with:
        #tflint_version: v0.50.3

    #- name: Show version
      #run: tflint --version

    #- name: Init TFLint
      #run: tflint --init
      #env:
        # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        #GITHUB_TOKEN: ${{ github.token }}

    #- name: Run TFLint
      #run: tflint -f compact
      
################################################################
###                    Terraform Plan                        ###
###            Applies terraform configuration               ###
################################################################    
#

################################################################
###                     Terraform Apply                      ###
###             Applies terraform configuration              ###
################################################################          
  terraform-apply:
    env:
      TF_CLOUD_ORGANIZATION: "devdotjson"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "resume-project"
      CONFIG_DIRECTORY: "./TF"
    name: "Terraform Apply"
    #needs: terraform-plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          terraform_wrapper: false

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      #- name: Fetch Outputs
      #  id: fetch-outputs
      #  run: |
      #    OUTPUTS=$(curl \
      #    --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
      #    --header "Content-Type: application/vnd.api+json" \
      #    https://app.terraform.io/api/v2/organizations/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}/current-state-version)
      #    echo "::set-output name=outputs::$OUTPUTS"

      - name: O export
        id: export-outputs
        run: | 
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
          terraform apply -auto-approve
          # Export Terraform output as step output
          $terraformOutput = (terraform output -json | ConvertFrom-Json -AsHashtable)     
          foreach ($key in $terraformOutput.Keys) {
            $outputVariableValue = $terraformOutput[$key].value
            Write-Output "::set-output name=${key}::${outputVariableValue}"
            Write-Output "TF_OUT_${key}=${outputVariableValue}" >> $env:GITHUB_ENV
            } 
        shell: sh
      - name: Export Terraform Output
        id: tf
        
        run: echo EC2_HOST=$(terraform output -raw instance_id) >> $GITHUB_ENV
             echo EC2_KEY_NAME=$(terraform output -raw key_name) >> $GITHUB_ENV
             echo EC2_PEM_KEY=$(terraform output -raw EC2_PEM_KEY) >> $GITHUB_ENV
             #echo AWS_ACCESS_KEY_ID=$(terraform output -raw user_id) >> $GITHUB_ENV
             #echo AWS_SECRET_ACCESS_KEY=$(terraform output -raw user_secret) >> $GITHUB_ENV
             #echo EC2_HOST=$(terraform output -raw instance_id) >> $GITHUB_ENV
             #echo EC2_HOST=$(terraform output -raw instance_id) >> $GITHUB_ENV
        working-directory: ./terraform
   


            
  


      
  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Necessary to fetch all tags and history

################################################################
###               SONAR CLOUD SCAN                           ###
### Drops the build if any bugs or vulnerabilities are found.###
###            Using the default quality gate.               ###
###        Connected to my personal Sonar Cloud account      ###
################################################################

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Setup Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        
################################################################
###               DETERMINE NEXT VERSION                     ###
###   Used for creating new releases and image tags          ###
################################################################

    - name: Determine Next Version
      id: next_version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag, assume semver, and sort.
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        
        # If there's no tag yet, start with v0.0.0. Used for new repos
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        
        # Increment the patch version
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        
        # Output the next version
        echo "::set-output name=tag::$NEXT_TAG"
        echo "Next version: $NEXT_TAG"
        
################################################################
###                     CREATE RELEASE                       ###
###  Creating release with the tag from the previous step    ###
################################################################

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN_2 }}
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        release_name: Release ${{ steps.next_version.outputs.tag }}
        draft: false
        prerelease: false
        
################################################################
###                  BUILD DOCKER IMAGE                      ###
###         Build Docker image from the Dockefile            ###
################################################################

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract repository name
      id: repo-name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "::set-output name=repo_name::$REPO_NAME"

    - name: Build Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPO_NAME }}
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

###########################################################
###  Docker image Snyk scan | If fails, drop the action ###
###       Connected to my personal Snyk account         ###
###     The code owner receives an email notification   ###
### Possible to configure Slack notification if needed  ###
###########################################################               
               
    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
         image: ${{ env.IMAGE_NAME }}
         args: --severity-threshold=high --policy-path=.snyk
      continue-on-error: false

###########################################################
###                  PUSH IMAGE TO ECR                  ###
###     Tag Docker image as "latest" and push to ECR    ###
########################################################### 

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: resume-project
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        # Tag the image as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push the specific version tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Push the latest tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest  

###########################################################
###         PUSH IMAGE TO ECR AND DEPLOY TO EC2         ###
###     Tag Docker image as "latest" and push to ECR    ###
###               Deploy to EC2 using SSH               ###
########################################################### 

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: resume-project
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        # Tag the image as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push the specific version tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Push the latest tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        

    - name: Deploy to EC2
      env:
        EC2_PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: resume-project
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      run: |
        # Save PEM key to file and set permissions
        echo "$EC2_PEM_KEY" > $EC2_KEY_NAME.pem  
        chmod 400 $EC2_KEY_NAME.pem
        # Create docker dir
        #mkdir docker
        #echo "$ACCOUNT_ID" > /home/$EC2_USER/docker/.env
        
        
        

        # SSH, SCP commands
        SSH_COMMAND="ssh -i $EC2_KEY_NAME.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST"
        SCP_COMMAND="scp -i $EC2_KEY_NAME.pem -o StrictHostKeyChecking=no"

        # Login to Docker registry
        $SSH_COMMAND "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY"
        
        # Copy compose.yml and Dockerfile to EC2 server
        $SCP_COMMAND compose.yaml $EC2_USER@$EC2_HOST:/home/$EC2_USER/docker/
        
        # Pull and run the Docker container on EC2
        #$SSH_COMMAND "cd /home/ubuntu/docker/ && docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && docker compose -f compose.yaml up -d --force-recreate"
        $SSH_COMMAND "cd /home/ubuntu/docker/ && docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && ACCOUNT_ID=$ACCOUNT_ID docker compose -f compose.yaml up -d --force-recreate"
        
        # Cleanup PEM key
        rm -f $EC2_KEY_NAME.pem


  
